// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/src/Json.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function CreateFetcherFactory(FC) {
  var CreateFetcher = function (C) {
    var url = FC[/* baseUrl */0] + C[/* url */1];
    var fetch$1 = function (payload, headers, _) {
      var body = payload ? /* Some */[Json.stringify(Curry._1(C[/* encodePayload */5], payload[0]))] : /* None */0;
      var headers$1 = Object.assign({
            "Content-Type": "application/json"
          }, Object.assign(Js_dict.fromList(C[/* headers */2]), Js_dict.fromList(headers ? headers[0] : /* [] */0)));
      return fetch(url, Fetch.RequestInit[/* make */0](/* Some */[C[/* method__ */4]], /* Some */[headers$1], body, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0));
    };
    var component = ReasonReact.reducerComponent(C[/* name */0]);
    var make = function (render, payload, headers, $staropt$star, _) {
      var lazy_ = $staropt$star ? $staropt$star[0] : false;
      return /* record */[
              /* debugName */component[/* debugName */0],
              /* reactClassInternal */component[/* reactClassInternal */1],
              /* handedOffState */component[/* handedOffState */2],
              /* willReceiveProps */(function (self) {
                  Curry._1(self[/* send */3], /* Fetch */0);
                  return self[/* state */1];
                }),
              /* didMount */(function (self) {
                  if (lazy_ === false) {
                    Curry._1(self[/* send */3], /* Fetch */0);
                  }
                  return /* () */0;
                }),
              /* didUpdate */component[/* didUpdate */5],
              /* willUnmount */component[/* willUnmount */6],
              /* willUpdate */component[/* willUpdate */7],
              /* shouldUpdate */component[/* shouldUpdate */8],
              /* render */(function (self) {
                  var state = self[/* state */1];
                  var fetch = function () {
                    return Curry._1(self[/* send */3], /* Fetch */0);
                  };
                  return Curry._1(render, /* record */[
                              /* state */state,
                              /* fetch */fetch
                            ]);
                }),
              /* initialState */(function () {
                  return /* record */[
                          /* data */C[/* defaultValue */3],
                          /* reason : None */0,
                          /* status : Idle */0
                        ];
                }),
              /* retainedProps */component[/* retainedProps */11],
              /* reducer */(function (action, state) {
                  if (typeof action === "number") {
                    if (action !== 0) {
                      return /* Update */Block.__(0, [/* record */[
                                  /* data */state[/* data */0],
                                  /* reason */state[/* reason */1],
                                  /* status : Idle */0
                                ]]);
                    } else {
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* data */state[/* data */0],
                                  /* reason */state[/* reason */1],
                                  /* status : Fetching */1
                                ],
                                (function (self) {
                                    fetch$1(payload, headers, /* () */0).then((function (prim) {
                                                return prim.json();
                                              })).then((function (json) {
                                              Curry._1(self[/* send */3], /* ParseData */[/* Success */Block.__(0, [Curry._1(C[/* decodeState */6], json)])]);
                                              return Promise.resolve(null);
                                            })).catch((function (err) {
                                            console.log("Error: ", err);
                                            Curry._1(self[/* send */3], /* ParseData */[/* Failed */Block.__(1, ["Fetch Error"])]);
                                            return Promise.resolve(null);
                                          }));
                                    return /* () */0;
                                  })
                              ]);
                    }
                  } else {
                    var fetchedData = action[0];
                    if (typeof fetchedData === "number") {
                      return /* NoUpdate */0;
                    } else if (fetchedData.tag) {
                      return /* Update */Block.__(0, [/* record */[
                                  /* data */state[/* data */0],
                                  /* reason : Some */[fetchedData[0]],
                                  /* status : Failed */2
                                ]]);
                    } else {
                      return /* Update */Block.__(0, [/* record */[
                                  /* data */fetchedData[0],
                                  /* reason : None */0,
                                  /* status : Idle */0
                                ]]);
                    }
                  }
                }),
              /* subscriptions */component[/* subscriptions */13],
              /* jsElementWrapped */component[/* jsElementWrapped */14]
            ];
    };
    var compose = function (payload, headers, key, ref, $staropt$star, render) {
      var lazy_ = $staropt$star ? $staropt$star[0] : false;
      return ReasonReact.element(key, ref, make(render, payload, headers, /* Some */[lazy_], /* array */[]));
    };
    return /* module */[
            /* url */url,
            /* fetch */fetch$1,
            /* component */component,
            /* make */make,
            /* compose */compose
          ];
  };
  return /* module */[/* CreateFetcher */CreateFetcher];
}

var baseUrl = "/api/";

function CreateFetcher(C) {
  var url = baseUrl + C[/* url */1];
  var fetch$1 = function (payload, headers, _) {
    var body = payload ? /* Some */[Json.stringify(Curry._1(C[/* encodePayload */5], payload[0]))] : /* None */0;
    var headers$1 = Object.assign({
          "Content-Type": "application/json"
        }, Object.assign(Js_dict.fromList(C[/* headers */2]), Js_dict.fromList(headers ? headers[0] : /* [] */0)));
    return fetch(url, Fetch.RequestInit[/* make */0](/* Some */[C[/* method__ */4]], /* Some */[headers$1], body, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0));
  };
  var component = ReasonReact.reducerComponent(C[/* name */0]);
  var make = function (render, payload, headers, $staropt$star, _) {
    var lazy_ = $staropt$star ? $staropt$star[0] : false;
    return /* record */[
            /* debugName */component[/* debugName */0],
            /* reactClassInternal */component[/* reactClassInternal */1],
            /* handedOffState */component[/* handedOffState */2],
            /* willReceiveProps */(function (self) {
                Curry._1(self[/* send */3], /* Fetch */0);
                return self[/* state */1];
              }),
            /* didMount */(function (self) {
                if (lazy_ === false) {
                  Curry._1(self[/* send */3], /* Fetch */0);
                }
                return /* () */0;
              }),
            /* didUpdate */component[/* didUpdate */5],
            /* willUnmount */component[/* willUnmount */6],
            /* willUpdate */component[/* willUpdate */7],
            /* shouldUpdate */component[/* shouldUpdate */8],
            /* render */(function (self) {
                var state = self[/* state */1];
                var fetch = function () {
                  return Curry._1(self[/* send */3], /* Fetch */0);
                };
                return Curry._1(render, /* record */[
                            /* state */state,
                            /* fetch */fetch
                          ]);
              }),
            /* initialState */(function () {
                return /* record */[
                        /* data */C[/* defaultValue */3],
                        /* reason : None */0,
                        /* status : Idle */0
                      ];
              }),
            /* retainedProps */component[/* retainedProps */11],
            /* reducer */(function (action, state) {
                if (typeof action === "number") {
                  if (action !== 0) {
                    return /* Update */Block.__(0, [/* record */[
                                /* data */state[/* data */0],
                                /* reason */state[/* reason */1],
                                /* status : Idle */0
                              ]]);
                  } else {
                    return /* UpdateWithSideEffects */Block.__(2, [
                              /* record */[
                                /* data */state[/* data */0],
                                /* reason */state[/* reason */1],
                                /* status : Fetching */1
                              ],
                              (function (self) {
                                  fetch$1(payload, headers, /* () */0).then((function (prim) {
                                              return prim.json();
                                            })).then((function (json) {
                                            Curry._1(self[/* send */3], /* ParseData */[/* Success */Block.__(0, [Curry._1(C[/* decodeState */6], json)])]);
                                            return Promise.resolve(null);
                                          })).catch((function (err) {
                                          console.log("Error: ", err);
                                          Curry._1(self[/* send */3], /* ParseData */[/* Failed */Block.__(1, ["Fetch Error"])]);
                                          return Promise.resolve(null);
                                        }));
                                  return /* () */0;
                                })
                            ]);
                  }
                } else {
                  var fetchedData = action[0];
                  if (typeof fetchedData === "number") {
                    return /* NoUpdate */0;
                  } else if (fetchedData.tag) {
                    return /* Update */Block.__(0, [/* record */[
                                /* data */state[/* data */0],
                                /* reason : Some */[fetchedData[0]],
                                /* status : Failed */2
                              ]]);
                  } else {
                    return /* Update */Block.__(0, [/* record */[
                                /* data */fetchedData[0],
                                /* reason : None */0,
                                /* status : Idle */0
                              ]]);
                  }
                }
              }),
            /* subscriptions */component[/* subscriptions */13],
            /* jsElementWrapped */component[/* jsElementWrapped */14]
          ];
  };
  var compose = function (payload, headers, key, ref, $staropt$star, render) {
    var lazy_ = $staropt$star ? $staropt$star[0] : false;
    return ReasonReact.element(key, ref, make(render, payload, headers, /* Some */[lazy_], /* array */[]));
  };
  return /* module */[
          /* url */url,
          /* fetch */fetch$1,
          /* component */component,
          /* make */make,
          /* compose */compose
        ];
}

function generate(make) {
  return Curry._1(make, /* () */0);
}

var component = ReasonReact.statelessComponent("FetcherComposer");

function make(compose, render, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return Curry._1(render, Belt_List.map(compose, (function (comp) {
                                return Curry._1(comp, /* () */0);
                              })));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var Composer = /* module */[
  /* generate */generate,
  /* component */component,
  /* make */make
];

var name = "RLimitFetcher";

var url = "rlimit";

var defaultValue = /* record */[
  /* curCpuLimit */0,
  /* maxCpuLimit */0,
  /* curAsLimit */0,
  /* maxAsLimit */0,
  /* curStackLimit */0,
  /* maxStackLimit */0,
  /* curDataLimit */0,
  /* maxDataLimit */0
];

function encodePayload() {
  return null;
}

function decodeState(json) {
  return /* record */[
          /* curCpuLimit */Json_decode.field("cur_cpu_limit", Json_decode.$$int, json),
          /* maxCpuLimit */Json_decode.field("max_cpu_limit", Json_decode.$$int, json),
          /* curAsLimit */Json_decode.field("cur_as_limit", Json_decode.$$int, json),
          /* maxAsLimit */Json_decode.field("max_as_limit", Json_decode.$$int, json),
          /* curStackLimit */Json_decode.field("cur_stack_limit", Json_decode.$$int, json),
          /* maxStackLimit */Json_decode.field("max_stack_limit", Json_decode.$$int, json),
          /* curDataLimit */Json_decode.field("cur_data_limit", Json_decode.$$int, json),
          /* maxDataLimit */Json_decode.field("max_data_limit", Json_decode.$$int, json)
        ];
}

var RLimitConfig = /* module */[
  /* name */name,
  /* url */url,
  /* headers : [] */0,
  /* defaultValue */defaultValue,
  /* method__ : Get */0,
  /* encodePayload */encodePayload,
  /* decodeState */decodeState
];

var url$1 = "/api/rlimit";

function fetch$1(payload, headers, _) {
  var body = payload ? /* Some */[Json.stringify(null)] : /* None */0;
  var headers$1 = Object.assign({
        "Content-Type": "application/json"
      }, Object.assign(Js_dict.fromList(/* [] */0), Js_dict.fromList(headers ? headers[0] : /* [] */0)));
  return fetch(url$1, Fetch.RequestInit[/* make */0](/* Some */[/* Get */0], /* Some */[headers$1], body, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0));
}

var component$1 = ReasonReact.reducerComponent(name);

function make$1(render, payload, headers, $staropt$star, _) {
  var lazy_ = $staropt$star ? $staropt$star[0] : false;
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */(function (self) {
              Curry._1(self[/* send */3], /* Fetch */0);
              return self[/* state */1];
            }),
          /* didMount */(function (self) {
              if (lazy_ === false) {
                Curry._1(self[/* send */3], /* Fetch */0);
              }
              return /* () */0;
            }),
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function (self) {
              var state = self[/* state */1];
              var fetch = function () {
                return Curry._1(self[/* send */3], /* Fetch */0);
              };
              return Curry._1(render, /* record */[
                          /* state */state,
                          /* fetch */fetch
                        ]);
            }),
          /* initialState */(function () {
              return /* record */[
                      /* data */defaultValue,
                      /* reason : None */0,
                      /* status : Idle */0
                    ];
            }),
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* Update */Block.__(0, [/* record */[
                              /* data */state[/* data */0],
                              /* reason */state[/* reason */1],
                              /* status : Idle */0
                            ]]);
                } else {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* record */[
                              /* data */state[/* data */0],
                              /* reason */state[/* reason */1],
                              /* status : Fetching */1
                            ],
                            (function (self) {
                                fetch$1(payload, headers, /* () */0).then((function (prim) {
                                            return prim.json();
                                          })).then((function (json) {
                                          Curry._1(self[/* send */3], /* ParseData */[/* Success */Block.__(0, [decodeState(json)])]);
                                          return Promise.resolve(null);
                                        })).catch((function (err) {
                                        console.log("Error: ", err);
                                        Curry._1(self[/* send */3], /* ParseData */[/* Failed */Block.__(1, ["Fetch Error"])]);
                                        return Promise.resolve(null);
                                      }));
                                return /* () */0;
                              })
                          ]);
                }
              } else {
                var fetchedData = action[0];
                if (typeof fetchedData === "number") {
                  return /* NoUpdate */0;
                } else if (fetchedData.tag) {
                  return /* Update */Block.__(0, [/* record */[
                              /* data */state[/* data */0],
                              /* reason : Some */[fetchedData[0]],
                              /* status : Failed */2
                            ]]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* data */fetchedData[0],
                              /* reason : None */0,
                              /* status : Idle */0
                            ]]);
                }
              }
            }),
          /* subscriptions */component$1[/* subscriptions */13],
          /* jsElementWrapped */component$1[/* jsElementWrapped */14]
        ];
}

function compose(payload, headers, key, ref, $staropt$star, render) {
  var lazy_ = $staropt$star ? $staropt$star[0] : false;
  return ReasonReact.element(key, ref, make$1(render, payload, headers, /* Some */[lazy_], /* array */[]));
}

var RLimit = /* module */[
  /* url */url$1,
  /* fetch */fetch$1,
  /* component */component$1,
  /* make */make$1,
  /* compose */compose
];

var name$1 = "RLimitFetcher";

var url$2 = "fd";

function encodePayload$1() {
  return null;
}

function decodeState$1(json) {
  var match = Js_json.decodeArray(json);
  if (match) {
    var __x = Belt_List.fromArray(match[0]);
    var __x$1 = Belt_List.keepMap(__x, Js_json.decodeNumber);
    return Belt_List.map(__x$1, (function (d) {
                  return String(d | 0);
                }));
  } else {
    return /* [] */0;
  }
}

var FdListConfig = /* module */[
  /* name */name$1,
  /* url */url$2,
  /* headers : [] */0,
  /* defaultValue : [] */0,
  /* method__ : Get */0,
  /* encodePayload */encodePayload$1,
  /* decodeState */decodeState$1
];

var url$3 = "/api/fd";

function fetch$2(payload, headers, _) {
  var body = payload ? /* Some */[Json.stringify(null)] : /* None */0;
  var headers$1 = Object.assign({
        "Content-Type": "application/json"
      }, Object.assign(Js_dict.fromList(/* [] */0), Js_dict.fromList(headers ? headers[0] : /* [] */0)));
  return fetch(url$3, Fetch.RequestInit[/* make */0](/* Some */[/* Get */0], /* Some */[headers$1], body, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0));
}

var component$2 = ReasonReact.reducerComponent(name$1);

function make$2(render, payload, headers, $staropt$star, _) {
  var lazy_ = $staropt$star ? $staropt$star[0] : false;
  return /* record */[
          /* debugName */component$2[/* debugName */0],
          /* reactClassInternal */component$2[/* reactClassInternal */1],
          /* handedOffState */component$2[/* handedOffState */2],
          /* willReceiveProps */(function (self) {
              Curry._1(self[/* send */3], /* Fetch */0);
              return self[/* state */1];
            }),
          /* didMount */(function (self) {
              if (lazy_ === false) {
                Curry._1(self[/* send */3], /* Fetch */0);
              }
              return /* () */0;
            }),
          /* didUpdate */component$2[/* didUpdate */5],
          /* willUnmount */component$2[/* willUnmount */6],
          /* willUpdate */component$2[/* willUpdate */7],
          /* shouldUpdate */component$2[/* shouldUpdate */8],
          /* render */(function (self) {
              var state = self[/* state */1];
              var fetch = function () {
                return Curry._1(self[/* send */3], /* Fetch */0);
              };
              return Curry._1(render, /* record */[
                          /* state */state,
                          /* fetch */fetch
                        ]);
            }),
          /* initialState */(function () {
              return /* record */[
                      /* data : [] */0,
                      /* reason : None */0,
                      /* status : Idle */0
                    ];
            }),
          /* retainedProps */component$2[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* Update */Block.__(0, [/* record */[
                              /* data */state[/* data */0],
                              /* reason */state[/* reason */1],
                              /* status : Idle */0
                            ]]);
                } else {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* record */[
                              /* data */state[/* data */0],
                              /* reason */state[/* reason */1],
                              /* status : Fetching */1
                            ],
                            (function (self) {
                                fetch$2(payload, headers, /* () */0).then((function (prim) {
                                            return prim.json();
                                          })).then((function (json) {
                                          Curry._1(self[/* send */3], /* ParseData */[/* Success */Block.__(0, [decodeState$1(json)])]);
                                          return Promise.resolve(null);
                                        })).catch((function (err) {
                                        console.log("Error: ", err);
                                        Curry._1(self[/* send */3], /* ParseData */[/* Failed */Block.__(1, ["Fetch Error"])]);
                                        return Promise.resolve(null);
                                      }));
                                return /* () */0;
                              })
                          ]);
                }
              } else {
                var fetchedData = action[0];
                if (typeof fetchedData === "number") {
                  return /* NoUpdate */0;
                } else if (fetchedData.tag) {
                  return /* Update */Block.__(0, [/* record */[
                              /* data */state[/* data */0],
                              /* reason : Some */[fetchedData[0]],
                              /* status : Failed */2
                            ]]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* data */fetchedData[0],
                              /* reason : None */0,
                              /* status : Idle */0
                            ]]);
                }
              }
            }),
          /* subscriptions */component$2[/* subscriptions */13],
          /* jsElementWrapped */component$2[/* jsElementWrapped */14]
        ];
}

function compose$1(payload, headers, key, ref, $staropt$star, render) {
  var lazy_ = $staropt$star ? $staropt$star[0] : false;
  return ReasonReact.element(key, ref, make$2(render, payload, headers, /* Some */[lazy_], /* array */[]));
}

var FdList = /* module */[
  /* url */url$3,
  /* fetch */fetch$2,
  /* component */component$2,
  /* make */make$2,
  /* compose */compose$1
];

var name$2 = "MountList";

var url$4 = "mount";

function encodePayload$2() {
  return null;
}

function decodeState$2(json) {
  var match = Js_json.decodeArray(json);
  if (match) {
    var __x = Belt_List.fromArray(match[0]);
    return Belt_List.keepMap(__x, Js_json.decodeString);
  } else {
    return /* [] */0;
  }
}

var MountListConfig = /* module */[
  /* name */name$2,
  /* url */url$4,
  /* headers : [] */0,
  /* defaultValue : [] */0,
  /* method__ : Get */0,
  /* encodePayload */encodePayload$2,
  /* decodeState */decodeState$2
];

var url$5 = "/api/mount";

function fetch$3(payload, headers, _) {
  var body = payload ? /* Some */[Json.stringify(null)] : /* None */0;
  var headers$1 = Object.assign({
        "Content-Type": "application/json"
      }, Object.assign(Js_dict.fromList(/* [] */0), Js_dict.fromList(headers ? headers[0] : /* [] */0)));
  return fetch(url$5, Fetch.RequestInit[/* make */0](/* Some */[/* Get */0], /* Some */[headers$1], body, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0));
}

var component$3 = ReasonReact.reducerComponent(name$2);

function make$3(render, payload, headers, $staropt$star, _) {
  var lazy_ = $staropt$star ? $staropt$star[0] : false;
  return /* record */[
          /* debugName */component$3[/* debugName */0],
          /* reactClassInternal */component$3[/* reactClassInternal */1],
          /* handedOffState */component$3[/* handedOffState */2],
          /* willReceiveProps */(function (self) {
              Curry._1(self[/* send */3], /* Fetch */0);
              return self[/* state */1];
            }),
          /* didMount */(function (self) {
              if (lazy_ === false) {
                Curry._1(self[/* send */3], /* Fetch */0);
              }
              return /* () */0;
            }),
          /* didUpdate */component$3[/* didUpdate */5],
          /* willUnmount */component$3[/* willUnmount */6],
          /* willUpdate */component$3[/* willUpdate */7],
          /* shouldUpdate */component$3[/* shouldUpdate */8],
          /* render */(function (self) {
              var state = self[/* state */1];
              var fetch = function () {
                return Curry._1(self[/* send */3], /* Fetch */0);
              };
              return Curry._1(render, /* record */[
                          /* state */state,
                          /* fetch */fetch
                        ]);
            }),
          /* initialState */(function () {
              return /* record */[
                      /* data : [] */0,
                      /* reason : None */0,
                      /* status : Idle */0
                    ];
            }),
          /* retainedProps */component$3[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* Update */Block.__(0, [/* record */[
                              /* data */state[/* data */0],
                              /* reason */state[/* reason */1],
                              /* status : Idle */0
                            ]]);
                } else {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* record */[
                              /* data */state[/* data */0],
                              /* reason */state[/* reason */1],
                              /* status : Fetching */1
                            ],
                            (function (self) {
                                fetch$3(payload, headers, /* () */0).then((function (prim) {
                                            return prim.json();
                                          })).then((function (json) {
                                          Curry._1(self[/* send */3], /* ParseData */[/* Success */Block.__(0, [decodeState$2(json)])]);
                                          return Promise.resolve(null);
                                        })).catch((function (err) {
                                        console.log("Error: ", err);
                                        Curry._1(self[/* send */3], /* ParseData */[/* Failed */Block.__(1, ["Fetch Error"])]);
                                        return Promise.resolve(null);
                                      }));
                                return /* () */0;
                              })
                          ]);
                }
              } else {
                var fetchedData = action[0];
                if (typeof fetchedData === "number") {
                  return /* NoUpdate */0;
                } else if (fetchedData.tag) {
                  return /* Update */Block.__(0, [/* record */[
                              /* data */state[/* data */0],
                              /* reason : Some */[fetchedData[0]],
                              /* status : Failed */2
                            ]]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* data */fetchedData[0],
                              /* reason : None */0,
                              /* status : Idle */0
                            ]]);
                }
              }
            }),
          /* subscriptions */component$3[/* subscriptions */13],
          /* jsElementWrapped */component$3[/* jsElementWrapped */14]
        ];
}

function compose$2(payload, headers, key, ref, $staropt$star, render) {
  var lazy_ = $staropt$star ? $staropt$star[0] : false;
  return ReasonReact.element(key, ref, make$3(render, payload, headers, /* Some */[lazy_], /* array */[]));
}

var MountList = /* module */[
  /* url */url$5,
  /* fetch */fetch$3,
  /* component */component$3,
  /* make */make$3,
  /* compose */compose$2
];

exports.CreateFetcherFactory = CreateFetcherFactory;
exports.CreateFetcher = CreateFetcher;
exports.Composer = Composer;
exports.RLimitConfig = RLimitConfig;
exports.RLimit = RLimit;
exports.FdListConfig = FdListConfig;
exports.FdList = FdList;
exports.MountListConfig = MountListConfig;
exports.MountList = MountList;
/* component Not a pure module */
