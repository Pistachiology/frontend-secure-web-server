// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var React = require("react");
var Fetcher = require("./Fetcher.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var WithHeader = require("./WithHeader.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var SimpleTable = require("./SimpleTable.bs.js");

var component = ReasonReact.statelessComponent("Home Page");

var title = Css.style(/* :: */[
      Css.fontSize(Css.px(48)),
      /* [] */0
    ]);

var container = Css.style(/* :: */[
      Css.selector(" " + title, /* :: */[
            Css.fontWeight(800),
            /* :: */[
              Css.width(Css.pct(100)),
              /* [] */0
            ]
          ]),
      /* [] */0
    ]);

var infoContainer = Css.style(/* :: */[
      Css.padding2(Css.px(32), Css.px(32)),
      /* :: */[
        Css.selector(" h2", /* :: */[
              Css.fontSize(Css.px(32)),
              /* :: */[
                Css.marginBottom(Css.px(16)),
                /* [] */0
              ]
            ]),
        /* :: */[
          Css.selector(" h3", /* :: */[
                Css.fontSize(Css.px(16)),
                /* :: */[
                  Css.fontWeight(400),
                  /* :: */[
                    Css.marginLeft(Css.px(30)),
                    /* [] */0
                  ]
                ]
              ]),
          /* [] */0
        ]
      ]
    ]);

var Styles = /* module */[
  /* title */title,
  /* container */container,
  /* infoContainer */infoContainer
];

function convertRlimitToDataSource(rlimit) {
  return /* :: */[
          /* tuple */[
            "cur_cpu_limit",
            String(rlimit[/* curCpuLimit */0])
          ],
          /* :: */[
            /* tuple */[
              "max_cpu_limit",
              String(rlimit[/* maxCpuLimit */1])
            ],
            /* :: */[
              /* tuple */[
                "cur_as_limit",
                String(rlimit[/* curAsLimit */2])
              ],
              /* :: */[
                /* tuple */[
                  "max_as_limit",
                  String(rlimit[/* maxAsLimit */3])
                ],
                /* :: */[
                  /* tuple */[
                    "cur_stak_limit",
                    String(rlimit[/* curStackLimit */4])
                  ],
                  /* :: */[
                    /* tuple */[
                      "max_stack_limit",
                      String(rlimit[/* maxStackLimit */5])
                    ],
                    /* :: */[
                      /* tuple */[
                        "cur_data_limit",
                        String(rlimit[/* curDataLimit */6])
                      ],
                      /* :: */[
                        /* tuple */[
                          "max_data_limit",
                          String(rlimit[/* maxDataLimit */7])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ];
}

function listToString_(d) {
  if (d) {
    var tail = d[1];
    var last = d[0];
    if (tail) {
      return last + (", " + listToString_(tail));
    } else {
      return last;
    }
  } else {
    return "";
  }
}

function listToString(d) {
  return "[" + (listToString_(d) + "]");
}

function t1() {
  return ReasonReact.element(/* None */0, /* None */0, Fetcher.RLimit[/* make */3]((function () {
                    return React.createElement("div", undefined);
                  }), /* None */0, /* None */0, /* None */0, /* array */[]));
}

function t2() {
  return ReasonReact.element(/* None */0, /* None */0, Fetcher.MountList[/* make */3]((function () {
                    return React.createElement("div", undefined);
                  }), /* None */0, /* None */0, /* None */0, /* array */[]));
}

function test(t) {
  if (t) {
    return t2(/* () */0);
  } else {
    return t1(/* () */0);
  }
}

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return ReasonReact.element(/* None */0, /* None */0, WithHeader.make(/* array */[ReasonReact.element(/* None */0, /* None */0, Fetcher.RLimit[/* make */3]((function (param) {
                                          var rlimitState = param[/* state */0];
                                          return ReasonReact.element(/* None */0, /* None */0, Fetcher.MountList[/* make */3]((function (param) {
                                                            var mountListState = param[/* state */0];
                                                            return ReasonReact.element(/* None */0, /* None */0, Fetcher.FdList[/* make */3]((function (param) {
                                                                              var fdListState = param[/* state */0];
                                                                              var match = rlimitState[/* status */2];
                                                                              var match$1 = fdListState[/* status */2];
                                                                              var match$2 = mountListState[/* status */2];
                                                                              var exit = 0;
                                                                              if (match !== 0 || match$1 !== 0 || match$2 !== 0) {
                                                                                exit = 1;
                                                                              } else {
                                                                                var __x = mountListState[/* data */0];
                                                                                return React.createElement("div", {
                                                                                            className: container
                                                                                          }, React.createElement("h1", {
                                                                                                className: title
                                                                                              }, "Dashboard"), React.createElement("div", {
                                                                                                className: infoContainer
                                                                                              }, React.createElement("h2", undefined, "RLimit"), ReasonReact.element(/* None */0, /* None */0, SimpleTable.make(convertRlimitToDataSource(rlimitState[/* data */0]), /* array */[]))), React.createElement("div", {
                                                                                                className: infoContainer
                                                                                              }, React.createElement("h2", undefined, "FD List"), React.createElement("h3", undefined, listToString(fdListState[/* data */0]))), React.createElement("div", {
                                                                                                className: infoContainer
                                                                                              }, React.createElement("h2", undefined, "Mount List"), Belt_List.toArray(Belt_List.mapWithIndex(__x, (function (ikey, text) {
                                                                                                          return React.createElement("h3", {
                                                                                                                      key: String(ikey)
                                                                                                                    }, text);
                                                                                                        })))));
                                                                              }
                                                                              if (exit === 1) {
                                                                                return React.createElement("div", {
                                                                                            key: "1"
                                                                                          }, "Loading");
                                                                              }
                                                                              
                                                                            }), /* None */0, /* None */0, /* None */0, /* array */[]));
                                                          }), /* None */0, /* None */0, /* None */0, /* array */[]));
                                        }), /* None */0, /* None */0, /* None */0, /* array */[]))]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.component = component;
exports.Styles = Styles;
exports.convertRlimitToDataSource = convertRlimitToDataSource;
exports.listToString_ = listToString_;
exports.listToString = listToString;
exports.t1 = t1;
exports.t2 = t2;
exports.test = test;
exports.make = make;
/* component Not a pure module */
